[user]
	email = talbet.fulthorpe@gmail.com
	name = Talbet Fulthorpe
[core]
  autocrlf = false
	editor = code --wait
  excludesfile = ~/.gitignore_global
[alias]
  # add
  a = add                           # add

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --oneline --decorate
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lg = log --graph --date=short
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status

  # Assume a file as unchanged:
  assume = update-index --assume-unchanged
  hide = update-index --assume-unchanged
  # Unassume a file:
  unassume = update-index --no-assume-unchanged
  unhide = update-index --no-assume-unchanged
  # Show assumed files:
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  # Unassume all the assumed files:
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  # Assume all:
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

  # Delete any branches that have been merged into master
  # See also: https://gist.github.com/robmiller/5133264
  delete-merged-branches = "!git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  prune-against-remote = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d"

  # from: https://gist.github.com/robmiller/6018582
  # Get the current branch name (not so useful in itself, but used in other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"
  # Push the current branch to the remote "origin", and set it to track the upstream branch
  publish = "!git push -u origin $(git branch-name)"
  # Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"
  # Delete a branch and recreate it from master â€” useful if you have, say, a development branch and
  # a master branch and they could conceivably go out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"
  # connect an upstream branch if you forgot to publish
  connect = "!git branch --set-upstream-to=origin/$(git branch-name)"
  # reset a branch to the upstream commit
  resetb = reset --hard @{u}

[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "status"]
  added = yellow
  changed = green
  untracked = red
[github]
  user = talbet
[push]
  default = current
[fetch]
  prune = true
[diff]
  tool = vscode-diff
[difftool "vscode-diff"]
  cmd = code --wait --diff $LOCAL $REMOTE